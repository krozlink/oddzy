// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/racing.proto

/*
Package racing is a generated protocol buffer package.

It is generated from these files:
	proto/racing.proto

It has these top-level messages:
	RaceUpdatedMessage
	ListMeetingsByDateRequest
	ListMeetingsByDateResponse
	ListRacesByMeetingDateRequest
	ListRacesByMeetingDateResponse
	AddRacesRequest
	AddRacesResponse
	AddMeetingsRequest
	AddMeetingsResponse
	UpdateRaceRequest
	UpdateRaceResponse
	GetNextRaceRequest
	GetNextRaceResponse
	Meeting
	Competitor
	Selection
	Race
*/
package racing

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RaceUpdatedMessage struct {
	Race       *Race        `protobuf:"bytes,1,opt,name=race" json:"race,omitempty"`
	Selections []*Selection `protobuf:"bytes,2,rep,name=selections" json:"selections,omitempty"`
}

func (m *RaceUpdatedMessage) Reset()                    { *m = RaceUpdatedMessage{} }
func (m *RaceUpdatedMessage) String() string            { return proto.CompactTextString(m) }
func (*RaceUpdatedMessage) ProtoMessage()               {}
func (*RaceUpdatedMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RaceUpdatedMessage) GetRace() *Race {
	if m != nil {
		return m.Race
	}
	return nil
}

func (m *RaceUpdatedMessage) GetSelections() []*Selection {
	if m != nil {
		return m.Selections
	}
	return nil
}

type ListMeetingsByDateRequest struct {
	StartDate int64 `protobuf:"varint,1,opt,name=start_date,json=startDate" json:"start_date,omitempty"`
	EndDate   int64 `protobuf:"varint,2,opt,name=end_date,json=endDate" json:"end_date,omitempty"`
}

func (m *ListMeetingsByDateRequest) Reset()                    { *m = ListMeetingsByDateRequest{} }
func (m *ListMeetingsByDateRequest) String() string            { return proto.CompactTextString(m) }
func (*ListMeetingsByDateRequest) ProtoMessage()               {}
func (*ListMeetingsByDateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ListMeetingsByDateRequest) GetStartDate() int64 {
	if m != nil {
		return m.StartDate
	}
	return 0
}

func (m *ListMeetingsByDateRequest) GetEndDate() int64 {
	if m != nil {
		return m.EndDate
	}
	return 0
}

type ListMeetingsByDateResponse struct {
	Meetings []*Meeting `protobuf:"bytes,1,rep,name=meetings" json:"meetings,omitempty"`
}

func (m *ListMeetingsByDateResponse) Reset()                    { *m = ListMeetingsByDateResponse{} }
func (m *ListMeetingsByDateResponse) String() string            { return proto.CompactTextString(m) }
func (*ListMeetingsByDateResponse) ProtoMessage()               {}
func (*ListMeetingsByDateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ListMeetingsByDateResponse) GetMeetings() []*Meeting {
	if m != nil {
		return m.Meetings
	}
	return nil
}

type ListRacesByMeetingDateRequest struct {
	StartDate int64 `protobuf:"varint,1,opt,name=start_date,json=startDate" json:"start_date,omitempty"`
	EndDate   int64 `protobuf:"varint,2,opt,name=end_date,json=endDate" json:"end_date,omitempty"`
}

func (m *ListRacesByMeetingDateRequest) Reset()                    { *m = ListRacesByMeetingDateRequest{} }
func (m *ListRacesByMeetingDateRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRacesByMeetingDateRequest) ProtoMessage()               {}
func (*ListRacesByMeetingDateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListRacesByMeetingDateRequest) GetStartDate() int64 {
	if m != nil {
		return m.StartDate
	}
	return 0
}

func (m *ListRacesByMeetingDateRequest) GetEndDate() int64 {
	if m != nil {
		return m.EndDate
	}
	return 0
}

type ListRacesByMeetingDateResponse struct {
	Races []*Race `protobuf:"bytes,1,rep,name=races" json:"races,omitempty"`
}

func (m *ListRacesByMeetingDateResponse) Reset()                    { *m = ListRacesByMeetingDateResponse{} }
func (m *ListRacesByMeetingDateResponse) String() string            { return proto.CompactTextString(m) }
func (*ListRacesByMeetingDateResponse) ProtoMessage()               {}
func (*ListRacesByMeetingDateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListRacesByMeetingDateResponse) GetRaces() []*Race {
	if m != nil {
		return m.Races
	}
	return nil
}

type AddRacesRequest struct {
	Races []*Race `protobuf:"bytes,1,rep,name=races" json:"races,omitempty"`
}

func (m *AddRacesRequest) Reset()                    { *m = AddRacesRequest{} }
func (m *AddRacesRequest) String() string            { return proto.CompactTextString(m) }
func (*AddRacesRequest) ProtoMessage()               {}
func (*AddRacesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AddRacesRequest) GetRaces() []*Race {
	if m != nil {
		return m.Races
	}
	return nil
}

type AddRacesResponse struct {
	Created bool `protobuf:"varint,1,opt,name=created" json:"created,omitempty"`
}

func (m *AddRacesResponse) Reset()                    { *m = AddRacesResponse{} }
func (m *AddRacesResponse) String() string            { return proto.CompactTextString(m) }
func (*AddRacesResponse) ProtoMessage()               {}
func (*AddRacesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AddRacesResponse) GetCreated() bool {
	if m != nil {
		return m.Created
	}
	return false
}

type AddMeetingsRequest struct {
	Meetings []*Meeting `protobuf:"bytes,1,rep,name=meetings" json:"meetings,omitempty"`
}

func (m *AddMeetingsRequest) Reset()                    { *m = AddMeetingsRequest{} }
func (m *AddMeetingsRequest) String() string            { return proto.CompactTextString(m) }
func (*AddMeetingsRequest) ProtoMessage()               {}
func (*AddMeetingsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AddMeetingsRequest) GetMeetings() []*Meeting {
	if m != nil {
		return m.Meetings
	}
	return nil
}

type AddMeetingsResponse struct {
	Created bool `protobuf:"varint,1,opt,name=created" json:"created,omitempty"`
}

func (m *AddMeetingsResponse) Reset()                    { *m = AddMeetingsResponse{} }
func (m *AddMeetingsResponse) String() string            { return proto.CompactTextString(m) }
func (*AddMeetingsResponse) ProtoMessage()               {}
func (*AddMeetingsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *AddMeetingsResponse) GetCreated() bool {
	if m != nil {
		return m.Created
	}
	return false
}

type UpdateRaceRequest struct {
	RaceId         string       `protobuf:"bytes,1,opt,name=race_id,json=raceId" json:"race_id,omitempty"`
	ScheduledStart int64        `protobuf:"varint,2,opt,name=scheduled_start,json=scheduledStart" json:"scheduled_start,omitempty"`
	ActualStart    int64        `protobuf:"varint,3,opt,name=actual_start,json=actualStart" json:"actual_start,omitempty"`
	Status         string       `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
	Results        string       `protobuf:"bytes,5,opt,name=results" json:"results,omitempty"`
	Selections     []*Selection `protobuf:"bytes,6,rep,name=selections" json:"selections,omitempty"`
}

func (m *UpdateRaceRequest) Reset()                    { *m = UpdateRaceRequest{} }
func (m *UpdateRaceRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRaceRequest) ProtoMessage()               {}
func (*UpdateRaceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *UpdateRaceRequest) GetRaceId() string {
	if m != nil {
		return m.RaceId
	}
	return ""
}

func (m *UpdateRaceRequest) GetScheduledStart() int64 {
	if m != nil {
		return m.ScheduledStart
	}
	return 0
}

func (m *UpdateRaceRequest) GetActualStart() int64 {
	if m != nil {
		return m.ActualStart
	}
	return 0
}

func (m *UpdateRaceRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *UpdateRaceRequest) GetResults() string {
	if m != nil {
		return m.Results
	}
	return ""
}

func (m *UpdateRaceRequest) GetSelections() []*Selection {
	if m != nil {
		return m.Selections
	}
	return nil
}

type UpdateRaceResponse struct {
	Updated bool `protobuf:"varint,1,opt,name=updated" json:"updated,omitempty"`
}

func (m *UpdateRaceResponse) Reset()                    { *m = UpdateRaceResponse{} }
func (m *UpdateRaceResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateRaceResponse) ProtoMessage()               {}
func (*UpdateRaceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UpdateRaceResponse) GetUpdated() bool {
	if m != nil {
		return m.Updated
	}
	return false
}

type GetNextRaceRequest struct {
	MeetingId string `protobuf:"bytes,1,opt,name=meeting_id,json=meetingId" json:"meeting_id,omitempty"`
}

func (m *GetNextRaceRequest) Reset()                    { *m = GetNextRaceRequest{} }
func (m *GetNextRaceRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNextRaceRequest) ProtoMessage()               {}
func (*GetNextRaceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetNextRaceRequest) GetMeetingId() string {
	if m != nil {
		return m.MeetingId
	}
	return ""
}

type GetNextRaceResponse struct {
	Race *Race `protobuf:"bytes,1,opt,name=race" json:"race,omitempty"`
}

func (m *GetNextRaceResponse) Reset()                    { *m = GetNextRaceResponse{} }
func (m *GetNextRaceResponse) String() string            { return proto.CompactTextString(m) }
func (*GetNextRaceResponse) ProtoMessage()               {}
func (*GetNextRaceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetNextRaceResponse) GetRace() *Race {
	if m != nil {
		return m.Race
	}
	return nil
}

type Meeting struct {
	MeetingId      string   `protobuf:"bytes,1,opt,name=meeting_id,json=meetingId" json:"meeting_id,omitempty"`
	SourceId       string   `protobuf:"bytes,2,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
	Name           string   `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Country        string   `protobuf:"bytes,4,opt,name=country" json:"country,omitempty"`
	RaceType       string   `protobuf:"bytes,5,opt,name=race_type,json=raceType" json:"race_type,omitempty"`
	ScheduledStart int64    `protobuf:"varint,6,opt,name=scheduled_start,json=scheduledStart" json:"scheduled_start,omitempty"`
	RaceIds        []string `protobuf:"bytes,7,rep,name=race_ids,json=raceIds" json:"race_ids,omitempty"`
	DateCreated    int64    `protobuf:"varint,8,opt,name=date_created,json=dateCreated" json:"date_created,omitempty"`
	LastUpdated    int64    `protobuf:"varint,9,opt,name=last_updated,json=lastUpdated" json:"last_updated,omitempty"`
}

func (m *Meeting) Reset()                    { *m = Meeting{} }
func (m *Meeting) String() string            { return proto.CompactTextString(m) }
func (*Meeting) ProtoMessage()               {}
func (*Meeting) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Meeting) GetMeetingId() string {
	if m != nil {
		return m.MeetingId
	}
	return ""
}

func (m *Meeting) GetSourceId() string {
	if m != nil {
		return m.SourceId
	}
	return ""
}

func (m *Meeting) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Meeting) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Meeting) GetRaceType() string {
	if m != nil {
		return m.RaceType
	}
	return ""
}

func (m *Meeting) GetScheduledStart() int64 {
	if m != nil {
		return m.ScheduledStart
	}
	return 0
}

func (m *Meeting) GetRaceIds() []string {
	if m != nil {
		return m.RaceIds
	}
	return nil
}

func (m *Meeting) GetDateCreated() int64 {
	if m != nil {
		return m.DateCreated
	}
	return 0
}

func (m *Meeting) GetLastUpdated() int64 {
	if m != nil {
		return m.LastUpdated
	}
	return 0
}

type Competitor struct {
	CompetitorId string `protobuf:"bytes,1,opt,name=competitor_id,json=competitorId" json:"competitor_id,omitempty"`
	SourceId     string `protobuf:"bytes,2,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
	Name         string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	DateOfBirth  string `protobuf:"bytes,4,opt,name=date_of_birth,json=dateOfBirth" json:"date_of_birth,omitempty"`
	Country      string `protobuf:"bytes,5,opt,name=country" json:"country,omitempty"`
	Trainer      string `protobuf:"bytes,6,opt,name=trainer" json:"trainer,omitempty"`
	Gender       string `protobuf:"bytes,7,opt,name=gender" json:"gender,omitempty"`
	ImageUrl     string `protobuf:"bytes,8,opt,name=image_url,json=imageUrl" json:"image_url,omitempty"`
}

func (m *Competitor) Reset()                    { *m = Competitor{} }
func (m *Competitor) String() string            { return proto.CompactTextString(m) }
func (*Competitor) ProtoMessage()               {}
func (*Competitor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Competitor) GetCompetitorId() string {
	if m != nil {
		return m.CompetitorId
	}
	return ""
}

func (m *Competitor) GetSourceId() string {
	if m != nil {
		return m.SourceId
	}
	return ""
}

func (m *Competitor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Competitor) GetDateOfBirth() string {
	if m != nil {
		return m.DateOfBirth
	}
	return ""
}

func (m *Competitor) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Competitor) GetTrainer() string {
	if m != nil {
		return m.Trainer
	}
	return ""
}

func (m *Competitor) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *Competitor) GetImageUrl() string {
	if m != nil {
		return m.ImageUrl
	}
	return ""
}

type Selection struct {
	SelectionId        string `protobuf:"bytes,1,opt,name=selection_id,json=selectionId" json:"selection_id,omitempty"`
	SourceId           string `protobuf:"bytes,2,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
	CompetitorId       string `protobuf:"bytes,3,opt,name=competitor_id,json=competitorId" json:"competitor_id,omitempty"`
	SourceCompetitorId string `protobuf:"bytes,4,opt,name=source_competitor_id,json=sourceCompetitorId" json:"source_competitor_id,omitempty"`
	RaceId             string `protobuf:"bytes,5,opt,name=race_id,json=raceId" json:"race_id,omitempty"`
	Name               string `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	Jockey             string `protobuf:"bytes,7,opt,name=jockey" json:"jockey,omitempty"`
	Number             int32  `protobuf:"varint,8,opt,name=number" json:"number,omitempty"`
	BarrierNumber      int32  `protobuf:"varint,9,opt,name=barrier_number,json=barrierNumber" json:"barrier_number,omitempty"`
	Scratched          bool   `protobuf:"varint,10,opt,name=scratched" json:"scratched,omitempty"`
	DateCreated        int64  `protobuf:"varint,11,opt,name=date_created,json=dateCreated" json:"date_created,omitempty"`
	LastUpdated        int64  `protobuf:"varint,12,opt,name=last_updated,json=lastUpdated" json:"last_updated,omitempty"`
}

func (m *Selection) Reset()                    { *m = Selection{} }
func (m *Selection) String() string            { return proto.CompactTextString(m) }
func (*Selection) ProtoMessage()               {}
func (*Selection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Selection) GetSelectionId() string {
	if m != nil {
		return m.SelectionId
	}
	return ""
}

func (m *Selection) GetSourceId() string {
	if m != nil {
		return m.SourceId
	}
	return ""
}

func (m *Selection) GetCompetitorId() string {
	if m != nil {
		return m.CompetitorId
	}
	return ""
}

func (m *Selection) GetSourceCompetitorId() string {
	if m != nil {
		return m.SourceCompetitorId
	}
	return ""
}

func (m *Selection) GetRaceId() string {
	if m != nil {
		return m.RaceId
	}
	return ""
}

func (m *Selection) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Selection) GetJockey() string {
	if m != nil {
		return m.Jockey
	}
	return ""
}

func (m *Selection) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Selection) GetBarrierNumber() int32 {
	if m != nil {
		return m.BarrierNumber
	}
	return 0
}

func (m *Selection) GetScratched() bool {
	if m != nil {
		return m.Scratched
	}
	return false
}

func (m *Selection) GetDateCreated() int64 {
	if m != nil {
		return m.DateCreated
	}
	return 0
}

func (m *Selection) GetLastUpdated() int64 {
	if m != nil {
		return m.LastUpdated
	}
	return 0
}

type Race struct {
	RaceId         string `protobuf:"bytes,1,opt,name=race_id,json=raceId" json:"race_id,omitempty"`
	SourceId       string `protobuf:"bytes,2,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
	MeetingId      string `protobuf:"bytes,3,opt,name=meeting_id,json=meetingId" json:"meeting_id,omitempty"`
	Number         int32  `protobuf:"varint,4,opt,name=number" json:"number,omitempty"`
	Name           string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	ScheduledStart int64  `protobuf:"varint,6,opt,name=scheduled_start,json=scheduledStart" json:"scheduled_start,omitempty"`
	ActualStart    int64  `protobuf:"varint,7,opt,name=actual_start,json=actualStart" json:"actual_start,omitempty"`
	Status         string `protobuf:"bytes,8,opt,name=status" json:"status,omitempty"`
	Results        string `protobuf:"bytes,9,opt,name=results" json:"results,omitempty"`
	MeetingStart   int64  `protobuf:"varint,10,opt,name=meeting_start,json=meetingStart" json:"meeting_start,omitempty"`
	IsScraped      bool   `protobuf:"varint,11,opt,name=is_scraped,json=isScraped" json:"is_scraped,omitempty"`
	DateCreated    int64  `protobuf:"varint,12,opt,name=date_created,json=dateCreated" json:"date_created,omitempty"`
	LastUpdated    int64  `protobuf:"varint,13,opt,name=last_updated,json=lastUpdated" json:"last_updated,omitempty"`
}

func (m *Race) Reset()                    { *m = Race{} }
func (m *Race) String() string            { return proto.CompactTextString(m) }
func (*Race) ProtoMessage()               {}
func (*Race) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *Race) GetRaceId() string {
	if m != nil {
		return m.RaceId
	}
	return ""
}

func (m *Race) GetSourceId() string {
	if m != nil {
		return m.SourceId
	}
	return ""
}

func (m *Race) GetMeetingId() string {
	if m != nil {
		return m.MeetingId
	}
	return ""
}

func (m *Race) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Race) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Race) GetScheduledStart() int64 {
	if m != nil {
		return m.ScheduledStart
	}
	return 0
}

func (m *Race) GetActualStart() int64 {
	if m != nil {
		return m.ActualStart
	}
	return 0
}

func (m *Race) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Race) GetResults() string {
	if m != nil {
		return m.Results
	}
	return ""
}

func (m *Race) GetMeetingStart() int64 {
	if m != nil {
		return m.MeetingStart
	}
	return 0
}

func (m *Race) GetIsScraped() bool {
	if m != nil {
		return m.IsScraped
	}
	return false
}

func (m *Race) GetDateCreated() int64 {
	if m != nil {
		return m.DateCreated
	}
	return 0
}

func (m *Race) GetLastUpdated() int64 {
	if m != nil {
		return m.LastUpdated
	}
	return 0
}

func init() {
	proto.RegisterType((*RaceUpdatedMessage)(nil), "racing.RaceUpdatedMessage")
	proto.RegisterType((*ListMeetingsByDateRequest)(nil), "racing.ListMeetingsByDateRequest")
	proto.RegisterType((*ListMeetingsByDateResponse)(nil), "racing.ListMeetingsByDateResponse")
	proto.RegisterType((*ListRacesByMeetingDateRequest)(nil), "racing.ListRacesByMeetingDateRequest")
	proto.RegisterType((*ListRacesByMeetingDateResponse)(nil), "racing.ListRacesByMeetingDateResponse")
	proto.RegisterType((*AddRacesRequest)(nil), "racing.AddRacesRequest")
	proto.RegisterType((*AddRacesResponse)(nil), "racing.AddRacesResponse")
	proto.RegisterType((*AddMeetingsRequest)(nil), "racing.AddMeetingsRequest")
	proto.RegisterType((*AddMeetingsResponse)(nil), "racing.AddMeetingsResponse")
	proto.RegisterType((*UpdateRaceRequest)(nil), "racing.UpdateRaceRequest")
	proto.RegisterType((*UpdateRaceResponse)(nil), "racing.UpdateRaceResponse")
	proto.RegisterType((*GetNextRaceRequest)(nil), "racing.GetNextRaceRequest")
	proto.RegisterType((*GetNextRaceResponse)(nil), "racing.GetNextRaceResponse")
	proto.RegisterType((*Meeting)(nil), "racing.Meeting")
	proto.RegisterType((*Competitor)(nil), "racing.Competitor")
	proto.RegisterType((*Selection)(nil), "racing.Selection")
	proto.RegisterType((*Race)(nil), "racing.Race")
}

func init() { proto.RegisterFile("proto/racing.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 961 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x5f, 0x6f, 0xdc, 0x44,
	0x10, 0xe7, 0xe2, 0xfb, 0x63, 0xcf, 0xdd, 0x35, 0x74, 0x8b, 0x52, 0xc7, 0x25, 0x28, 0x75, 0x55,
	0xa8, 0x04, 0x4a, 0x21, 0x15, 0xe2, 0x89, 0x87, 0x24, 0x55, 0x51, 0x24, 0x5a, 0x24, 0x87, 0x3c,
	0xf0, 0x80, 0xac, 0x8d, 0x3d, 0xbd, 0x18, 0xee, 0xec, 0x63, 0x77, 0x8d, 0xb8, 0xaf, 0xc0, 0x0b,
	0xef, 0x7c, 0x37, 0x3e, 0x02, 0xe2, 0x2b, 0xa0, 0xfd, 0x77, 0xb6, 0x63, 0x5f, 0x2e, 0xa0, 0xbe,
	0x79, 0x7e, 0x33, 0x3b, 0x3b, 0xf3, 0x9b, 0xd9, 0xf1, 0x00, 0x59, 0xb2, 0x42, 0x14, 0xcf, 0x19,
	0x4d, 0xb2, 0x7c, 0x76, 0xa4, 0x04, 0x32, 0xd4, 0x52, 0x98, 0x01, 0x89, 0x68, 0x82, 0x97, 0xcb,
	0x94, 0x0a, 0x4c, 0x5f, 0x23, 0xe7, 0x74, 0x86, 0xe4, 0x10, 0xfa, 0x8c, 0x26, 0xe8, 0xf7, 0x0e,
	0x7b, 0xcf, 0xc6, 0xc7, 0x93, 0x23, 0x73, 0x54, 0x5a, 0x46, 0x4a, 0x43, 0xbe, 0x00, 0xe0, 0x38,
	0xc7, 0x44, 0x64, 0x45, 0xce, 0xfd, 0x9d, 0x43, 0xe7, 0xd9, 0xf8, 0xf8, 0xbe, 0xb5, 0xbb, 0xb0,
	0x9a, 0xa8, 0x66, 0x14, 0x5e, 0xc2, 0xfe, 0xb7, 0x19, 0x17, 0xaf, 0x11, 0x45, 0x96, 0xcf, 0xf8,
	0xe9, 0xea, 0x25, 0x15, 0x18, 0xe1, 0x2f, 0x25, 0x72, 0x41, 0x0e, 0x00, 0xb8, 0xa0, 0x4c, 0xc4,
	0x32, 0x0e, 0x75, 0xaf, 0x13, 0x79, 0x0a, 0x91, 0x56, 0x64, 0x1f, 0x5c, 0xcc, 0x53, 0xad, 0xdc,
	0x51, 0xca, 0x11, 0xe6, 0xa9, 0x54, 0x85, 0xe7, 0x10, 0x74, 0xb9, 0xe5, 0xcb, 0x22, 0xe7, 0x48,
	0x3e, 0x05, 0x77, 0x61, 0x34, 0x7e, 0x4f, 0x45, 0xb9, 0x6b, 0xa3, 0x34, 0x27, 0xa2, 0xb5, 0x41,
	0xf8, 0x03, 0x1c, 0x48, 0x57, 0x32, 0x4d, 0x7e, 0xba, 0x32, 0xfa, 0x77, 0x13, 0xe5, 0x4b, 0xf8,
	0x68, 0x93, 0x6b, 0x13, 0x69, 0x08, 0x03, 0xc9, 0xac, 0x0d, 0xb3, 0x49, 0xba, 0x56, 0x85, 0x5f,
	0xc2, 0xee, 0x49, 0x9a, 0x2a, 0x27, 0x36, 0xa4, 0xbb, 0x1c, 0xfb, 0x0c, 0xde, 0xaf, 0x8e, 0x99,
	0xeb, 0x7c, 0x18, 0x25, 0x0c, 0x65, 0xd1, 0x55, 0x1e, 0x6e, 0x64, 0xc5, 0xf0, 0x04, 0xc8, 0x49,
	0x9a, 0x5a, 0x3e, 0xed, 0x3d, 0xff, 0x89, 0xc8, 0xe7, 0xf0, 0xa0, 0xe1, 0x62, 0xeb, 0x9d, 0x7f,
	0xf5, 0xe0, 0xbe, 0xee, 0x41, 0x15, 0xb7, 0xb9, 0xf3, 0x21, 0x8c, 0x64, 0x02, 0x71, 0xa6, 0xed,
	0xbd, 0x48, 0x76, 0x2d, 0x9e, 0xa7, 0xe4, 0x13, 0xd8, 0xe5, 0xc9, 0x35, 0xa6, 0xe5, 0x1c, 0xd3,
	0x58, 0xf1, 0x6f, 0xf8, 0xbe, 0xb7, 0x86, 0x2f, 0x24, 0x4a, 0x1e, 0xc3, 0x84, 0x26, 0xa2, 0xa4,
	0x73, 0x63, 0xe5, 0x28, 0xab, 0xb1, 0xc6, 0xb4, 0xc9, 0x1e, 0x0c, 0xb9, 0xa0, 0xa2, 0xe4, 0x7e,
	0x5f, 0xdf, 0xa1, 0x25, 0x19, 0x2c, 0x43, 0x5e, 0xce, 0x05, 0xf7, 0x07, 0x4a, 0x61, 0xc5, 0x1b,
	0xbd, 0x3f, 0xbc, 0x4b, 0xef, 0x1f, 0x01, 0xa9, 0xa7, 0x57, 0xf1, 0x51, 0xea, 0x87, 0x67, 0xf9,
	0x30, 0x62, 0xf8, 0x02, 0xc8, 0x37, 0x28, 0xde, 0xe0, 0x6f, 0xa2, 0xce, 0xc7, 0x01, 0x80, 0xa1,
	0xb8, 0xa2, 0xc4, 0x33, 0xc8, 0x79, 0x1a, 0x7e, 0x05, 0x0f, 0x1a, 0x87, 0xcc, 0x2d, 0x5b, 0x1f,
	0x73, 0xf8, 0xe7, 0x0e, 0x8c, 0x4c, 0xb1, 0xb6, 0xdc, 0x41, 0x1e, 0x81, 0xc7, 0x8b, 0x92, 0xe9,
	0xa2, 0xec, 0x28, 0xad, 0xab, 0x81, 0xf3, 0x94, 0x10, 0xe8, 0xe7, 0x74, 0x81, 0x8a, 0x65, 0x2f,
	0x52, 0xdf, 0xaa, 0xe6, 0x45, 0x99, 0x0b, 0xb6, 0x32, 0xfc, 0x5a, 0x51, 0xba, 0x52, 0xd5, 0x15,
	0xab, 0x25, 0x1a, 0x8a, 0x5d, 0x09, 0x7c, 0xbf, 0x5a, 0x62, 0x57, 0x85, 0x87, 0x9d, 0x15, 0xde,
	0x07, 0xd7, 0xf4, 0x08, 0xf7, 0x47, 0x87, 0x8e, 0xaa, 0x93, 0x6a, 0x12, 0x2e, 0x8b, 0x2f, 0xd9,
	0x8c, 0x6d, 0xcf, 0xb9, 0xba, 0xf8, 0x12, 0x3b, 0xd3, 0x90, 0x34, 0x99, 0x53, 0x2e, 0x62, 0x5b,
	0x06, 0x4f, 0x9b, 0x48, 0xcc, 0x8c, 0xc4, 0xf0, 0x9f, 0x1e, 0xc0, 0x59, 0xb1, 0x58, 0xa2, 0xc8,
	0x44, 0xc1, 0xc8, 0x13, 0x98, 0x26, 0x6b, 0xa9, 0xa2, 0x68, 0x52, 0x81, 0xff, 0x87, 0xa5, 0x10,
	0xa6, 0x2a, 0xd4, 0xe2, 0x6d, 0x7c, 0x95, 0x31, 0x71, 0x6d, 0xb8, 0x52, 0xb1, 0x7e, 0xf7, 0xf6,
	0x54, 0x42, 0x75, 0x26, 0x07, 0x4d, 0x26, 0x7d, 0x18, 0x09, 0x46, 0xb3, 0x1c, 0x99, 0x22, 0xc9,
	0x8b, 0xac, 0x28, 0x9b, 0x7b, 0x86, 0x79, 0x8a, 0xcc, 0x1f, 0xe9, 0xe6, 0xd6, 0x92, 0x0c, 0x30,
	0x5b, 0xd0, 0x19, 0xc6, 0x25, 0x9b, 0x2b, 0x5e, 0xbc, 0xc8, 0x55, 0xc0, 0x25, 0x9b, 0x87, 0xbf,
	0x3b, 0xe0, 0xad, 0xdb, 0x58, 0x52, 0xb4, 0x6e, 0xe4, 0x2a, 0xdf, 0xf1, 0x1a, 0xdb, 0x96, 0x6e,
	0x8b, 0x30, 0xa7, 0x83, 0xb0, 0xcf, 0xe1, 0x03, 0xe3, 0xa1, 0x69, 0xab, 0x69, 0x20, 0x5a, 0x77,
	0x56, 0x3f, 0x51, 0x9b, 0x0d, 0x83, 0xc6, 0x6c, 0xb0, 0xf4, 0x0e, 0x6b, 0xf4, 0xee, 0xc1, 0xf0,
	0xa7, 0x22, 0xf9, 0x19, 0x57, 0x96, 0x06, 0x2d, 0x49, 0x3c, 0x2f, 0x17, 0x57, 0xc8, 0x14, 0x07,
	0x83, 0xc8, 0x48, 0xe4, 0x29, 0xdc, 0xbb, 0xa2, 0x8c, 0x65, 0xc8, 0x62, 0xa3, 0xf7, 0x94, 0x7e,
	0x6a, 0xd0, 0x37, 0xda, 0xec, 0x43, 0xf0, 0x78, 0xc2, 0xa8, 0x90, 0x1d, 0xe9, 0x83, 0x7a, 0xc1,
	0x15, 0xd0, 0x6a, 0xbf, 0xf1, 0xf6, 0xf6, 0x9b, 0xb4, 0xdb, 0xef, 0x0f, 0x07, 0xfa, 0xf2, 0xa9,
	0x6e, 0x1e, 0x86, 0xb7, 0xb2, 0xdf, 0x7c, 0xce, 0xce, 0xcd, 0xe7, 0x5c, 0x11, 0xd0, 0x6f, 0x10,
	0x60, 0x49, 0x1c, 0xd4, 0x48, 0xbc, 0xf3, 0x93, 0xbc, 0x39, 0x74, 0x47, 0xb7, 0x0d, 0x5d, 0x77,
	0xd3, 0xd0, 0xf5, 0x9a, 0x43, 0xf7, 0x09, 0x4c, 0x6d, 0x22, 0xda, 0x2b, 0x28, 0xaf, 0x13, 0x03,
	0x6a, 0xb7, 0x07, 0x00, 0x19, 0x8f, 0x65, 0x09, 0x96, 0x86, 0x70, 0x37, 0xf2, 0x32, 0x7e, 0xa1,
	0x81, 0x56, 0x45, 0x26, 0xdb, 0x2b, 0x32, 0x6d, 0x55, 0xe4, 0xf8, 0x6f, 0x07, 0xa6, 0x91, 0x9a,
	0xa1, 0x17, 0xc8, 0x7e, 0xcd, 0x12, 0x24, 0x3f, 0x02, 0x69, 0xaf, 0x20, 0xe4, 0xb1, 0x9d, 0xb4,
	0x1b, 0xb7, 0x9e, 0x20, 0xbc, 0xcd, 0x44, 0x8f, 0xef, 0xf0, 0x3d, 0x92, 0xc1, 0x5e, 0xf7, 0xee,
	0x40, 0x9e, 0xd6, 0xcf, 0x6f, 0x5c, 0x5b, 0x82, 0x8f, 0xb7, 0x99, 0xad, 0xaf, 0x7a, 0x05, 0xe3,
	0xda, 0x8f, 0x9b, 0x04, 0xf6, 0x60, 0x7b, 0x21, 0x08, 0x1e, 0x75, 0xea, 0xcc, 0x3f, 0xe7, 0x6b,
	0x70, 0xed, 0xc6, 0x41, 0x1e, 0xd6, 0x0c, 0xeb, 0xab, 0x4b, 0xe0, 0xb7, 0x15, 0xe6, 0xf8, 0x19,
	0x40, 0xf5, 0xbb, 0x24, 0xfb, 0xd6, 0xae, 0xb5, 0x21, 0x04, 0x41, 0x97, 0xca, 0x38, 0x79, 0x05,
	0xe3, 0xda, 0xef, 0xb0, 0xca, 0xa5, 0xfd, 0x63, 0xad, 0x72, 0xe9, 0xf8, 0x7f, 0x5e, 0x0d, 0xd5,
	0xc6, 0xfc, 0xe2, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x26, 0xb2, 0x26, 0x3c, 0x47, 0x0b, 0x00,
	0x00,
}
