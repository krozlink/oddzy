// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/scraper.proto

/*
Package go_micro_srv_racescraper is a generated protocol buffer package.

It is generated from these files:
	proto/scraper.proto

It has these top-level messages:
	ScrapeItem
	ScrapeHistoryItem
	GetWorkQueueRequest
	GetWorkQueueResponse
	GetStatusRequest
	GetStatusResponse
	GetWorkHistoryRequest
	GetWorkHistoryResponse
*/
package go_micro_srv_racescraper

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for MonitorService service

type MonitorService interface {
	GetWorkQueue(ctx context.Context, in *GetWorkQueueRequest, opts ...client.CallOption) (*GetWorkQueueResponse, error)
	GetWorkHistory(ctx context.Context, in *GetWorkHistoryRequest, opts ...client.CallOption) (*GetWorkHistoryResponse, error)
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...client.CallOption) (*GetStatusResponse, error)
}

type monitorService struct {
	c    client.Client
	name string
}

func NewMonitorService(name string, c client.Client) MonitorService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.racescraper"
	}
	return &monitorService{
		c:    c,
		name: name,
	}
}

func (c *monitorService) GetWorkQueue(ctx context.Context, in *GetWorkQueueRequest, opts ...client.CallOption) (*GetWorkQueueResponse, error) {
	req := c.c.NewRequest(c.name, "MonitorService.GetWorkQueue", in)
	out := new(GetWorkQueueResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorService) GetWorkHistory(ctx context.Context, in *GetWorkHistoryRequest, opts ...client.CallOption) (*GetWorkHistoryResponse, error) {
	req := c.c.NewRequest(c.name, "MonitorService.GetWorkHistory", in)
	out := new(GetWorkHistoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitorService) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...client.CallOption) (*GetStatusResponse, error) {
	req := c.c.NewRequest(c.name, "MonitorService.GetStatus", in)
	out := new(GetStatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MonitorService service

type MonitorServiceHandler interface {
	GetWorkQueue(context.Context, *GetWorkQueueRequest, *GetWorkQueueResponse) error
	GetWorkHistory(context.Context, *GetWorkHistoryRequest, *GetWorkHistoryResponse) error
	GetStatus(context.Context, *GetStatusRequest, *GetStatusResponse) error
}

func RegisterMonitorServiceHandler(s server.Server, hdlr MonitorServiceHandler, opts ...server.HandlerOption) {
	type monitorService interface {
		GetWorkQueue(ctx context.Context, in *GetWorkQueueRequest, out *GetWorkQueueResponse) error
		GetWorkHistory(ctx context.Context, in *GetWorkHistoryRequest, out *GetWorkHistoryResponse) error
		GetStatus(ctx context.Context, in *GetStatusRequest, out *GetStatusResponse) error
	}
	type MonitorService struct {
		monitorService
	}
	h := &monitorServiceHandler{hdlr}
	s.Handle(s.NewHandler(&MonitorService{h}, opts...))
}

type monitorServiceHandler struct {
	MonitorServiceHandler
}

func (h *monitorServiceHandler) GetWorkQueue(ctx context.Context, in *GetWorkQueueRequest, out *GetWorkQueueResponse) error {
	return h.MonitorServiceHandler.GetWorkQueue(ctx, in, out)
}

func (h *monitorServiceHandler) GetWorkHistory(ctx context.Context, in *GetWorkHistoryRequest, out *GetWorkHistoryResponse) error {
	return h.MonitorServiceHandler.GetWorkHistory(ctx, in, out)
}

func (h *monitorServiceHandler) GetStatus(ctx context.Context, in *GetStatusRequest, out *GetStatusResponse) error {
	return h.MonitorServiceHandler.GetStatus(ctx, in, out)
}
