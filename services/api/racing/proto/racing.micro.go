// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/racing.proto

/*
Package go_micro_api_racing is a generated protocol buffer package.

It is generated from these files:
	proto/racing.proto

It has these top-level messages:
*/
package go_micro_api_racing

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import go_api "github.com/micro/go-api/proto"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = go_api.Response{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Racing service

type RacingService interface {
	Racecard(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
	Schedule(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error)
}

type racingService struct {
	c    client.Client
	name string
}

func NewRacingService(name string, c client.Client) RacingService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.api.racing"
	}
	return &racingService{
		c:    c,
		name: name,
	}
}

func (c *racingService) Racecard(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Racing.Racecard", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *racingService) Schedule(ctx context.Context, in *go_api.Request, opts ...client.CallOption) (*go_api.Response, error) {
	req := c.c.NewRequest(c.name, "Racing.Schedule", in)
	out := new(go_api.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Racing service

type RacingHandler interface {
	Racecard(context.Context, *go_api.Request, *go_api.Response) error
	Schedule(context.Context, *go_api.Request, *go_api.Response) error
}

func RegisterRacingHandler(s server.Server, hdlr RacingHandler, opts ...server.HandlerOption) {
	type racing interface {
		Racecard(ctx context.Context, in *go_api.Request, out *go_api.Response) error
		Schedule(ctx context.Context, in *go_api.Request, out *go_api.Response) error
	}
	type Racing struct {
		racing
	}
	h := &racingHandler{hdlr}
	s.Handle(s.NewHandler(&Racing{h}, opts...))
}

type racingHandler struct {
	RacingHandler
}

func (h *racingHandler) Racecard(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.RacingHandler.Racecard(ctx, in, out)
}

func (h *racingHandler) Schedule(ctx context.Context, in *go_api.Request, out *go_api.Response) error {
	return h.RacingHandler.Schedule(ctx, in, out)
}
